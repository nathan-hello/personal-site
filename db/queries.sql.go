// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"
)

const insertComment = `-- name: InsertComment :one
INSERT INTO Comments (created_at,text,post_id) values (?,?,?) RETURNING id, created_at, author, text, post_id
`

type InsertCommentParams struct {
	CreatedAt string
	Text      string
	PostID    string
}

// InsertComment
//
//	INSERT INTO Comments (created_at,text,post_id) values (?,?,?) RETURNING id, created_at, author, text, post_id
func (q *Queries) InsertComment(ctx context.Context, arg InsertCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, insertComment, arg.CreatedAt, arg.Text, arg.PostID)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Author,
		&i.Text,
		&i.PostID,
	)
	return i, err
}

const selectCommentsMany = `-- name: SelectCommentsMany :many
SELECT id, created_at, author, text, post_id FROM Comments WHERE post_id = ?
`

// table: Comments
//
//	SELECT id, created_at, author, text, post_id FROM Comments WHERE post_id = ?
func (q *Queries) SelectCommentsMany(ctx context.Context, postID string) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, selectCommentsMany, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Author,
			&i.Text,
			&i.PostID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
