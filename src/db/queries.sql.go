// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const deleteTokensByUserId = `-- name: DeleteTokensByUserId :exec
DELETE FROM tokens
WHERE tokens.id IN (
        SELECT token_id FROM users_tokens WHERE users_tokens.user_id = ?
    )
`

func (q *Queries) DeleteTokensByUserId(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteTokensByUserId, userID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const insertToken = `-- name: InsertToken :one
INSERT INTO tokens (jwt_type, jwt, valid, family) VALUES (?, ?, ?, ?) RETURNING id
`

type InsertTokenParams struct {
	JwtType string
	Jwt     string
	Valid   bool
	Family  string
}

func (q *Queries) InsertToken(ctx context.Context, arg InsertTokenParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertToken,
		arg.JwtType,
		arg.Jwt,
		arg.Valid,
		arg.Family,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users ( email, username, encrypted_password, password_created_at)
values (?, ?, ?, ?)
RETURNING id, email, username
`

type InsertUserParams struct {
	Email             sql.NullString
	Username          string
	EncryptedPassword string
	PasswordCreatedAt string
}

type InsertUserRow struct {
	ID       string
	Email    sql.NullString
	Username string
}

// table: users
func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (InsertUserRow, error) {
	row := q.db.QueryRowContext(ctx, insertUser,
		arg.Email,
		arg.Username,
		arg.EncryptedPassword,
		arg.PasswordCreatedAt,
	)
	var i InsertUserRow
	err := row.Scan(&i.ID, &i.Email, &i.Username)
	return i, err
}

const insertUsersTokens = `-- name: InsertUsersTokens :exec
INSERT INTO users_tokens (user_id, token_id) VALUES (?, ?)
`

type InsertUsersTokensParams struct {
	UserID  string
	TokenID int64
}

func (q *Queries) InsertUsersTokens(ctx context.Context, arg InsertUsersTokensParams) error {
	_, err := q.db.ExecContext(ctx, insertUsersTokens, arg.UserID, arg.TokenID)
	return err
}

const selectEmailOrUsernameAlreadyExists = `-- name: SelectEmailOrUsernameAlreadyExists :one
SELECT email FROM users WHERE users.email = ? OR users.username = ?
`

type SelectEmailOrUsernameAlreadyExistsParams struct {
	Email    sql.NullString
	Username string
}

func (q *Queries) SelectEmailOrUsernameAlreadyExists(ctx context.Context, arg SelectEmailOrUsernameAlreadyExistsParams) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, selectEmailOrUsernameAlreadyExists, arg.Email, arg.Username)
	var email sql.NullString
	err := row.Scan(&email)
	return email, err
}

const selectTokenFromId = `-- name: SelectTokenFromId :one
SELECT id, jwt_type, jwt, valid, family FROM tokens WHERE id = ?
`

// table: tokens
func (q *Queries) SelectTokenFromId(ctx context.Context, id int64) (Token, error) {
	row := q.db.QueryRowContext(ctx, selectTokenFromId, id)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.JwtType,
		&i.Jwt,
		&i.Valid,
		&i.Family,
	)
	return i, err
}

const selectTokenFromJwtString = `-- name: SelectTokenFromJwtString :one
SELECT id, jwt_type, jwt, valid, family FROM tokens WHERE jwt = ?
`

func (q *Queries) SelectTokenFromJwtString(ctx context.Context, jwt string) (Token, error) {
	row := q.db.QueryRowContext(ctx, selectTokenFromJwtString, jwt)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.JwtType,
		&i.Jwt,
		&i.Valid,
		&i.Family,
	)
	return i, err
}

const selectUserByEmail = `-- name: SelectUserByEmail :one
SELECT created_at, username, email, encrypted_password, password_created_at, id FROM users WHERE email = ?
`

func (q *Queries) SelectUserByEmail(ctx context.Context, email sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, selectUserByEmail, email)
	var i User
	err := row.Scan(
		&i.CreatedAt,
		&i.Username,
		&i.Email,
		&i.EncryptedPassword,
		&i.PasswordCreatedAt,
		&i.ID,
	)
	return i, err
}

const selectUserByUsername = `-- name: SelectUserByUsername :one
SELECT created_at, username, email, encrypted_password, password_created_at, id FROM users WHERE username = ?
`

func (q *Queries) SelectUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, selectUserByUsername, username)
	var i User
	err := row.Scan(
		&i.CreatedAt,
		&i.Username,
		&i.Email,
		&i.EncryptedPassword,
		&i.PasswordCreatedAt,
		&i.ID,
	)
	return i, err
}

const selectUserIdFromToken = `-- name: SelectUserIdFromToken :one
SELECT user_id FROM users_tokens WHERE token_id = ? LIMIT 1
`

func (q *Queries) SelectUserIdFromToken(ctx context.Context, tokenID int64) (string, error) {
	row := q.db.QueryRowContext(ctx, selectUserIdFromToken, tokenID)
	var user_id string
	err := row.Scan(&user_id)
	return user_id, err
}

const selectUsersTokens = `-- name: SelectUsersTokens :many
SELECT id, user_id, token_id FROM users_tokens WHERE user_id = ?
`

// table: users_tokens
func (q *Queries) SelectUsersTokens(ctx context.Context, userID string) ([]UsersToken, error) {
	rows, err := q.db.QueryContext(ctx, selectUsersTokens, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersToken
	for rows.Next() {
		var i UsersToken
		if err := rows.Scan(&i.ID, &i.UserID, &i.TokenID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTokenValid = `-- name: UpdateTokenValid :one
UPDATE tokens SET valid = ? WHERE jwt = ? RETURNING id
`

type UpdateTokenValidParams struct {
	Valid bool
	Jwt   string
}

func (q *Queries) UpdateTokenValid(ctx context.Context, arg UpdateTokenValidParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, updateTokenValid, arg.Valid, arg.Jwt)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const updateTokensFamilyInvalid = `-- name: UpdateTokensFamilyInvalid :exec
UPDATE tokens SET valid = FALSE WHERE family = ?
`

func (q *Queries) UpdateTokensFamilyInvalid(ctx context.Context, family string) error {
	_, err := q.db.ExecContext(ctx, updateTokensFamilyInvalid, family)
	return err
}

const updateUserTokensToInvalid = `-- name: UpdateUserTokensToInvalid :exec
UPDATE tokens
SET valid = FALSE
WHERE id IN (
    SELECT token_id
    FROM users_tokens
    WHERE user_id = ?
)
`

func (q *Queries) UpdateUserTokensToInvalid(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, updateUserTokensToInvalid, userID)
	return err
}
