---
import type { BlogDetails, BlogAstro } from '@/types'
import {
    shapeForRendering,
    extractMetadata,
    parseAuthorName,
} from '@/utils/parseMetadata'

import Layout from '@layouts/Root.astro'

const blogs = await Astro.glob<BlogAstro>('/src/blog/**/b_*.astro').then((b) =>
    b
    .filter((b) => b.details.hidden !== true)

        .filter((b) => parseAuthorName(b.details.author, b.file) === 'natalie')
        .map((b, i) => shapeForRendering(extractMetadata(b), i))
)

const mdxs = await Astro.glob<BlogDetails>('/src/blog/**/b_*.mdx').then((b) =>
    b
    .filter((b) => b.frontmatter.hidden !== true)

        .filter((b) => parseAuthorName(b.frontmatter.author, b.file) === 'natalie')
        .map((b, i) => shapeForRendering(extractMetadata(b), i))
)

const all = [...blogs, ...mdxs]
    .sort(
        (a, b) =>
            new Date(b.props.details.date).getTime() -
            new Date(a.props.details.date).getTime()
    )
    .slice(0, 10)
---
